---
name: SuperLinter 🦸‍♀️

on:
  push:
    branches:
      - main
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - ready_for_review
    branches:
      - main
  workflow_dispatch:
  workflow_call:
    inputs:
      lintr_error_on_lint:
        description: Produce an error when lints are found
        required: false
        type: boolean
        default: true
      lint-all-files:
        description: Lint all files every time
        default: false
        required: false
        type: boolean

concurrency:
  group: lint-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: SuperLinter 🦸‍♂️
    runs-on: ubuntu-latest
    if: >
      !contains(github.event.commits[0].message, '[skip linter]')
        && github.event.pull_request.draft == false
    steps:
      - name: Checkout repo 🛎
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Override SuperLinter configs 💾
        run: |
          # Override markdownlint default config
          [ ! -e .markdownlint.yaml ] && cat > .markdownlint.yaml <<EOF
          ###############
          # Rules by id #
          ###############
          MD004: false                  # Unordered list style
          MD007:
            indent: 2                   # Unordered list indentation
          MD013:
            line_length: 800            # Line length
          MD026:
            punctuation: ".,;:!。，；:"  # List of not allowed
          MD029: false                  # Ordered list item prefix
          MD033: false                  # Allow inline HTML
          MD036: false                  # Emphasis used instead of a heading
          #################
          # Rules by tags #
          #################
          blank_lines: true  # Error on blank lines
          EOF
        shell: bash

      - name: Lint Code Base 🧶
        uses: super-linter/super-linter/slim@v5
        env:
          LINTER_RULES_PATH: /
          DEFAULT_BRANCH: main
          FILTER_REGEX_EXCLUDE: NEWS.md|design/.*|testthat/_snaps/.*
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_ALL_CODEBASE: false
          VALIDATE_BASH: true
          VALIDATE_DOCKERFILE: true
          VALIDATE_MARKDOWN: true
          MARKDOWN_CONFIG_FILE: .markdownlint.yaml
          VALIDATE_YAML: true

  lint-r-code:
    name: Lint R code 🧶
    runs-on: ubuntu-latest
    if: >
      !contains(github.event.commits[0].message, '[skip linter]')
        && github.event.pull_request.draft == false
    container:
      image: ghcr.io/insightsengineering/rstudio:latest
    steps:
      - name: Checkout repo 🛎
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Changed files 🖋️
        id: files
        uses: Ana06/get-changed-files@v2.2.0
        with:
          format: 'json'
          filter: '*'

      - name: Lint 🧶
        run: |
          exclusions_list <- NULL
          if (!identical("${{ inputs.lint-all-files }}", "true")) {
            changed_files <- jsonlite::fromJSON('${{ steps.files.outputs.added_modified }}')
            all_files <- list.files(recursive = TRUE)
            exclusions_list <- as.list(setdiff(all_files, changed_files))
          }
          lints <- lintr::lint_package(exclusions = exclusions_list)
          if (length(lints) > 0L) {
            print(lints)
            if (identical("${{ inputs.lintr_error_on_lint }}", "true")) {
              stop("Lints detected. Please review and adjust code according to the comments provided.", call. = FALSE)
            }
          }
        shell: Rscript {0}
