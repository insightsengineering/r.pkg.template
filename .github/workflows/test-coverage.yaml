---
name: Coverage ðŸ“”

on:
  push:
    branches:
      - main
      - pre-release
  pull_request:
    branches:
      - main
      - pre-release
  workflow_call:
    inputs:
      install-system-dependencies:
        description: Check for and install system dependencies
        required: false
        default: false
        type: boolean
      enable-staged-dependencies-check:
        description: Enable staged dependencies YAML check
        required: false
        default: false
        type: boolean
      publish-coverage-report:
        description: Publish the coverage report as a pull request comment
        required: false
        default: true
        type: boolean
    secrets:
      REPO_GITHUB_TOKEN:
        description: |
          Github token with read access to repositories, required for staged.dependencies installation
        required: false

concurrency:
  group: coverage-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  coverage:
    name: Coverage ðŸ“”
    runs-on: ubuntu-latest
    if: >
      !contains(github.event.commits[0].message, '[skip coverage]')
        && github.event.pull_request.draft == false
    container:
      image: ghcr.io/insightsengineering/rstudio_4.1.2_bioc_3.14:latest
    steps:
      - name: Get branch names ðŸŒ¿
        id: branch-name
        uses: tj-actions/branch-names@v5

      - name: Checkout repo ðŸ›Ž
        uses: actions/checkout@v2
        with:
          ref: ${{ steps.branch-name.outputs.head_ref_branch }}
          path: ${{ github.event.repository.name }}

      - name: Run Staged dependencies ðŸŽ¦
        uses: insightsengineering/staged-dependencies-action@v1
        with:
          run-system-dependencies: ${{ inputs.install-system-dependencies }}
        env:
          GITHUB_PAT: ${{ secrets.REPO_GITHUB_TOKEN }}
          SD_REPO_PATH: ${{ github.event.repository.name }}
          SD_ENABLE_CHECK: ${{ inputs.enable-staged-dependencies-check }}

      - name: Install R package ðŸš§
        run: R CMD INSTALL ${{ github.event.repository.name }}
        shell: bash

      - name: Install covr ðŸŽª
        run: if (!require("covr")) install.packages("covr")
        shell: Rscript {0}

      - name: Run coverage ðŸ‘Ÿ
        run: |
          tryCatch(
            expr = {
                x <- covr::package_coverage(path="${{ github.event.repository.name }}")
                print(x)
                covr::to_cobertura(x, filename = "coverage.xml")
                p <- covr::percent_coverage(x)
                cat(p, file = "coverage.txt", sep = "")
                covr::report(
                    x,
                    file = "coverage-report.html",
                    browse = FALSE
                )
            },
            error = function(e) {
                message("Errors generated during coverage analysis:")
                print(e)
            },
            warning = function(w) {
                message("Warnings generated during coverage analysis:")
                print(w)
            }
          )
        shell: Rscript {0}

      - name: Check whether coverage reports exists ðŸ’­
        id: check_coverage_reports
        uses: andstor/file-existence-action@v1
        with:
          files: "coverage.xml, coverage.txt, coverage-report.html"

      - name: Post coverage report ðŸ—ž
        if: steps.check_coverage_reports.outputs.files_exists == 'true'
        uses: insightsengineering/coverage-action@v1
        with:
          path: coverage.xml
          threshold: 80
          fail: false
          publish: ${{ inputs.publish-coverage-report }}

      - name: Upload report ðŸ”¼
        if: steps.check_coverage_reports.outputs.files_exists == 'true'
        uses: actions/upload-artifact@v2
        with:
          name: coverage-report
          path: "coverage-report.html"
