---
name: R Package Validation report 📃

on:
  push:
    tags:
      - "v*"
    branches:
      - main
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - ready_for_review
    branches:
      - main
  workflow_dispatch:
  workflow_call:
    inputs:
      install-system-dependencies:
        description: Check for and install system dependencies
        required: false
        default: false
        type: boolean
      enable-staged-dependencies-check:
        description: Enable staged dependencies YAML check
        required: false
        default: false
        type: boolean
      sd-direction:
        description: The direction to use to install staged dependencies. Choose between 'upstream', 'downstream' and 'all'
        required: false
        type: string
        default: upstream
    secrets:
      REPO_GITHUB_TOKEN:
        description: |
          Github token with read access to repositories, required for staged.dependencies installation
        required: false

concurrency:
  group: validation-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  validation:
    name: Create report 📃
    runs-on: ubuntu-latest
    if: >
      !contains(github.event.commits[0].message, '[skip validation]')
        && github.event.pull_request.draft == false
    container:
      image: ghcr.io/insightsengineering/rstudio_4.3.1_bioc_3.17:latest
    permissions:
      contents: write
      packages: write
      deployments: write
    steps:
      - name: Setup token 🔑
        id: github-token
        run: |
          if [ "${{ secrets.REPO_GITHUB_TOKEN }}" == "" ]; then
            echo "REPO_GITHUB_TOKEN is empty. Substituting it with GITHUB_TOKEN."
            echo "token=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_OUTPUT
          else
            echo "Using REPO_GITHUB_TOKEN."
            echo "token=${{ secrets.REPO_GITHUB_TOKEN }}" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Checkout repo 🛎
        uses: actions/checkout@v3

      - name: Restore SD cache 💰
        uses: actions/cache@v3
        with:
          key: sd-${{ runner.os }}-${{ github.event.repository.name }}
          path: ~/.staged.dependencies

      - name: Run Staged dependencies 🎦
        uses: insightsengineering/staged-dependencies-action@v1
        env:
          GITHUB_PAT: ${{ steps.github-token.outputs.token }}
        with:
          enable-check: ${{ inputs.enable-staged-dependencies-check }}
          run-system-dependencies: ${{ inputs.install-system-dependencies }}
          direction: ${{ inputs.sd-direction }}

      - name: Build report 🏗
        uses: insightsengineering/thevalidatoR@v1
        env:
          GITHUB_PAT: ${{ steps.github-token.outputs.token }}
        with:
          report_output_prefix: validation_report

      - name: Upload report for review ⬆
        if: github.ref != 'refs/heads/main'
        uses: actions/upload-artifact@v3
        with:
          name: validation_report.pdf
          path: validation_report.pdf

  upload-release-assets:
    name: Upload report to release 🔼
    needs: validation
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Download artifact ⏬
        uses: actions/download-artifact@v3
        with:
          name: validation_report.pdf

      - name: Get branch names 🌿
        id: branch-names
        uses: tj-actions/branch-names@v6

      - name: Get latest release 🚀
        id: get-latest-release
        uses: pozetroninc/github-action-get-latest-release@v0.7.0
        with:
          repository: ${{ github.repository }}
          excludes: prerelease, draft
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Show latest release 🚀
        id: show-latest-release
        run: |
          echo "Latest release = ${{ steps.get-latest-release.outputs.release }}"
          echo "Current tag = ${{ steps.branch-names.outputs.tag }}"
          if [[ "${{ steps.branch-names.outputs.tag }}" == "${{ steps.get-latest-release.outputs.release }}" ]]; then
            echo "Uploading assets to latest release."
            echo "latest-release-created=true" >> $GITHUB_OUTPUT
          else
            echo "Release has not been created for the tag, therefore the assets will not be uploaded."
          fi

      - name: Upload report to release 🔼
        if: >-
          steps.show-latest-release.outputs.latest-release-created == 'true'
        uses: svenstaro/upload-release-action@v2
        with:
          file: ./validation_report.pdf
          asset_name: validation-report.pdf
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref }}
          overwrite: true
