---
name: BiocCheck ‚ò£Ô∏è

on:
  push:
    tags:
      - "v*"
    branches:
      - main
      - pre-release
  pull_request:
    branches:
      - main
      - pre-release
  workflow_call:
    secrets:
      REPO_GITHUB_TOKEN:
        description: |
          Github token with read access to repositories, required for staged.dependencies installation
        required: false
    inputs:
      enable-bioccheck:
        description: Enable BiocCheck
        required: false
        type: boolean
        default: false
      install-system-dependencies:
        description: Check for and install system dependencies
        required: false
        default: false
        type: boolean
      enable-staged-dependencies-check:
        description: Enable staged dependencies YAML check
        required: false
        default: true
        type: boolean
      allow-failure:
        description: BiocCheck errors will not fail, but will give a warning.
        required: false
        type: boolean
        default: false

jobs:
  bioccheck:
    strategy:
      fail-fast: false
      matrix:
        config:
          - image: ghcr.io/insightsengineering/rstudio_4.1.2_bioc_3.14
            tag: latest
    name: ${{ matrix.config.image }}, version ${{ matrix.config.tag }}
    runs-on: ubuntu-latest
    if: "! contains(github.event.commits[0].message, '[skip bioccheck]') && contains(inputs.enable-bioccheck, 'true')"
    container:
      image: ${{ matrix.config.image }}:${{ matrix.config.tag }}

    steps:
      - name: Get branch names üåø
        id: branch-name
        uses: tj-actions/branch-names@v5

      - name: Checkout repo üõé
        uses: actions/checkout@v2
        with:
          ref: ${{ steps.branch-name.outputs.head_ref_branch }}
          path: ${{ github.event.repository.name }}

      - name: Run Staged dependencies üé¶
        uses: insightsengineering/staged-dependencies-action@v1
        with:
          run-system-dependencies: ${{ inputs.install-system-dependencies }}
        env:
          GITHUB_PAT: ${{ secrets.REPO_GITHUB_TOKEN }}
          SD_REPO_PATH: ${{ github.event.repository.name }}
          SD_ENABLE_CHECK: ${{ inputs.enable-staged-dependencies-check }}

      - name: Show session info and installed packages ‚Ñπ
        run: |
          sessionInfo()
          as.data.frame(installed.packages()[, c("LibPath", "Version")])
        shell: Rscript {0}

      - name: Build R package üèó
        run: |
          R CMD build ${{ github.event.repository.name }}
          echo "PKGBUILD=$(echo *.tar.gz)" >> $GITHUB_ENV
        shell: bash

      - name: Set TESTING_DEPTH ‚öô
        env:
          COMMIT_NEWEST_MESSAGE: ${{ github.event.head_commit.message }}
          COMMIT_OLDEST_MESSAGE: ${{ github.event.commits[0].message }}
        run: |
          cd ${{ github.event.repository.name }}
          # set TESTING_DEPTH for PR
          if [[ ! -z "${GITHUB_HEAD_REF}" ]]; then
            TESTING_DEPTH=3
            echo "TESTING_DEPTH=3" >> $GITHUB_ENV
            COMMIT_NEWEST_MESSAGE=$(git log --format=%B -n 1 ${{ github.event.after }})
          fi
          if [[ $COMMIT_NEWEST_MESSAGE == *"[skip tests]"* ]]; then
            echo "NO_TESTS=1" >> $GITHUB_ENV
          fi
          # default TESTING_DEPTH
          if [[ -z "${TESTING_DEPTH}" ]]; then
            echo "TESTING_DEPTH=1" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Run R CMD check üèÅ
        run: |
          if [[ -z "${{ env.NO_TESTS }}" ]]; then
            R CMD check ${{ env.PKGBUILD }}
          else
            R CMD check --no-tests ${{ env.PKGBUILD }}
          fi
        shell: bash
        continue-on-error: true
        env:
          _R_CHECK_TESTS_NLINES_: 0

      - name: Install R package üöß
        run: R CMD INSTALL ${{ env.PKGBUILD }}
        shell: bash

      - name: Run BiocCheck ‚ò£Ô∏è
        uses: insightsengineering/bioc-check-action@v1
        with:
          path: ${{ env.PKGBUILD }}
          no-check-version-num: true
          allow-failure: ${{ inputs.allow-failure }}
