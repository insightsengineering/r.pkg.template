---
name: Style 🎽

on:
  push:
    branches:
      - main
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - ready_for_review
    branches:
      - main
  workflow_dispatch:
  workflow_call:
    inputs:
      auto-update:
        description: If R code style is not up-to-date, styling will automatically be applied and restyled files will be automatically committed o the branch.
        required: false
        default: false
        type: boolean

concurrency:
  group: style-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  style:
    name: Check code style 🔠
    runs-on: ubuntu-latest
    if: >
      !contains(github.event.commits[0].message, '[skip style]')
        && github.event.pull_request.draft == false
    container:
      image: ghcr.io/insightsengineering/rstudio_4.2.2_bioc_3.16:latest

    steps:
      - name: Checkout Code 🛎
        uses: actions/checkout@v3
        with:
          path: ${{ github.event.repository.name }}
          fetch-depth: 0

      - name: Get branch names 🌿
        if: inputs.auto-update
        id: branch-name
        uses: tj-actions/branch-names@v6

      - name: Install styler 👚
        run: |
          install.packages("styler", repos = "https://cloud.r-project.org")
        shell: Rscript {0}

      - name: Get changed files 🗞
        id: changed-files
        uses: tj-actions/changed-files@v35
        with:
          path: ${{ github.event.repository.name }}
          separator: ","
          files: |
            **/*.R
            **/*.Rmd
            **/*.Rnw
            **/*.Rmarkdown
            **/*.qmd
        continue-on-error: true

      - name: Run styler 👟
        run: |
          changed_files <- unlist(strsplit(
            "${{ steps.changed-files.outputs.all_changed_files }}",
            split=","
          ))
          is_r_file <- function(x) {
              ext <- tools::file_ext(x)
              ext %in% c("R", "Rmd", "Rnw", "Rmarkdown", "qmd")
          }
          changed_r_files <- Filter(is_r_file, changed_files)
          dry <- if(isTRUE(as.logical("${{ inputs.auto-update }}"))) "off" else "on"
          detect <- styler::style_file(changed_r_files, dry = dry)
          if (TRUE %in% detect$changed) {
            problems <- subset(detect$file, detect$changed == T)
            dput(problems, file = "/tmp/style-problems.R")
            writeLines(
              problems,
              con = "/tmp/style-problems.txt",
              sep = " "
            )
          }
        shell: Rscript {0}
        working-directory: ${{ github.event.repository.name }}

      - name: Check file existence 🤔
        id: check_files
        uses: andstor/file-existence-action@v2
        with:
          files: "/tmp/style-problems.R, /tmp/style-problems.txt"

      - name: Get problematic files 🧟‍♂️
        id: problem-files
        if: steps.check_files.outputs.files_exists  == 'true'
        run: |
          perl -p -i -e 's/\R//g;' /tmp/style-problems.R
          echo "unstyled-files=$(cat /tmp/style-problems.txt)" >> $GITHUB_OUTPUT
        shell: bash

      - name: Autocommit styled files ↗️
        id: autocommit-styled-files
        if: >
          inputs.auto-update
            && steps.check_files.outputs.files_exists == 'true'
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'
          git add ${{ steps.problem-files.outputs.unstyled-files }}
          git commit -m '[skip actions] Restyle files'
          git pull origin ${{ steps.branch-name.outputs.head_ref_branch }}
          git push -v origin HEAD:${{ steps.branch-name.outputs.head_ref_branch }} || \
            echo "⚠️ Could not push to ${BRANCH_NAME} on $(git remote -v show -n origin | grep Push)"
        shell: bash
        working-directory: ${{ github.event.repository.name }}
        continue-on-error: true

      - name: Styler check summary 🅾
        if: >
          (inputs.auto-update != true
            && steps.check_files.outputs.files_exists == 'true')
            || (steps.autocommit-styled-files.outcome != 'success'
            && steps.autocommit-styled-files.outcome != 'skipped')
        run: |
          cat(paste(
            "☠ One or more files had styling errors.",
            "Please see the log above for remediations,",
            "or simply run the following commands",
            "for an immediate fix:\n"
          ))
          cat("────────────────────────────────────────\n")
          cat(paste0(
            "styler::style_file(",
              readLines("/tmp/style-problems.R", warn=FALSE),
            ")\n"
          ))
          cat("────────────────────────────────────────\n")
          quit(status = 1)
        shell: Rscript {0}
