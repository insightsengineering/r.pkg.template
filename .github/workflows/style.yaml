---
name: Style ðŸŽ½

on:
  push:
    branches:
      - main
      - pre-release
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - ready_for_review
    branches:
      - main
      - pre-release
  workflow_dispatch:
  workflow_call:
    inputs:
      auto-update:
        description: If R code files are not up-to-date, they will be automatically updated and committed back to the branch.
        required: false
        default: false
        type: boolean

concurrency:
  group: style-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  style:
    name: Check code style ðŸ” 
    runs-on: ubuntu-latest
    if: >
      !contains(github.event.commits[0].message, '[skip style]')
        && github.event.pull_request.draft == false
    container:
      image: ghcr.io/insightsengineering/rstudio_4.1.2_bioc_3.14:latest

    steps:
      - name: Get branch names ðŸŒ¿
        id: branch-name
        uses: tj-actions/branch-names@v5

      - name: Checkout Code ðŸ›Ž
        uses: actions/checkout@v3
        with:
          ref: ${{ steps.branch-name.outputs.head_ref_branch }}
          path: ${{ github.event.repository.name }}
          fetch-depth: 0

      - name: Install styler ðŸ‘š
        run: |
          install.packages("styler", repos = "https://cloud.r-project.org")
        shell: Rscript {0}

      - name: Get changed files ðŸ—ž
        id: changed-files
        uses: tj-actions/changed-files@v20
        with:
          path: ${{ github.event.repository.name }}
          separator: ","
          files: |
            **.R
            **.Rmd
            **.Rnw
            **.Rmarkdown

      - name: Run styler ðŸ‘Ÿ
        run: |
          setwd("${{ github.event.repository.name }}")
          changed_files <- unlist(strsplit(
            "${{ steps.changed-files.outputs.all_changed_files }}",
            split=","
          ))
          is_r_file <- function(x) {
              ext <- tools::file_ext(x)
              ext %in% c("R", "Rmd", "Rnw", "Rmarkdown")
          }
          changed_r_files <- Filter(is_r_file, changed_files)
          dry <- if(isTRUE(as.logical("${{ inputs.auto-update }}"))) "off" else "on"
          detect <- styler::style_file(changed_r_files, dry = dry)
          if (TRUE %in% detect$changed) {
            problems <- subset(detect$file, detect$changed == T)
            cat(paste(
              "â˜  One or more files had styling errors.",
              "Please see the log above for remediations,",
              "or simply run the following commands",
              "for an immediate fix:\n"
            ))
            cat("â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\n")
            cat(paste0(
              "styler::style_file(", capture.output(dput(problems)), ")\n"
            ))
            cat("â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\n")
            quit(status = length(problems))
          }
        shell: Rscript {0}
        continue-on-error: true

      - name: Styler check summary ðŸ…¾
        run: |
          cd ${{ github.event.repository.name }}
          git status -s
          if [[ -n `git status -s | grep .R` ]]
          then {
            echo "ðŸ™ˆ Code style is not correct!"
            echo "ðŸ”€ The following differences were noted:"
            git diff
            if [ "${{ inputs.auto-update }}" == "true" ]
            then {
              echo "Regenerating R code files via auto-update"
              git config --global user.name 'Insights Engineering Bot'
              git config --global user.email '68416928+insights-engineering-bot@users.noreply.github.com'
              echo "Adding changes to git"
              git status -s | grep -E "\.R$|\.Rmd$|\.Rnw$|\.Rmarkdown$" | cut -f3 -d ' '  | xargs git add -v
              git commit -am "code style - update code"
              git pull origin ${GITHUB_HEAD_REF}
              git push -v origin ${GITHUB_HEAD_REF}
              echo "Pushed"
            }
            else {
              echo -e "\nðŸ’» Please rerun the following command on your workstation and push your changes"
              echo "--------------------------------------------------------------------"
              echo "styler::style_file(changed_r_files)"
              echo "--------------------------------------------------------------------"
            }
            fi
            exit 1
          } else {
            echo "ðŸ’š Code Style is correct"
          }
          fi
        shell: bash
